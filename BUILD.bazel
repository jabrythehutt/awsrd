load("@npm//:defs.bzl", "npm_link_all_packages")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("index.bzl", "cjs_bundle", "cli", "to_package_args_choice")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("session_manager.bzl", "session_manager")
load("platforms.bzl", "platforms")
load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_run_binary")
load("@aspect_rules_jest//jest:defs.bzl", "jest_test")
load("@npm//:@vscode/vsce/package_json.bzl", "bin")

platforms()

npm_link_all_packages(
    name = "node_modules",
)

deps = [
    "//:node_modules/@aws-sdk/client-ec2",
    "//:node_modules/@aws-sdk/client-ec2-instance-connect",
    "//:node_modules/@aws-sdk/client-ssm",
    "//:node_modules/@aws-sdk/client-sts",
    "//:node_modules/@aws-sdk/credential-providers",
    "//:node_modules/@aws-sdk/shared-ini-file-loader",
    "//:node_modules/@aws-sdk/smithy-client",
    "//:node_modules/@aws-sdk/types",
    "//:node_modules/@types/lodash",
    "//:node_modules/@types/node",
    "//:node_modules/@types/sshpk",
    "//:node_modules/@types/validator",
    "//:node_modules/@types/vscode",
    "//:node_modules/@types/yargs",
    "//:node_modules/aws-cdk-lib",
    "//:node_modules/cdk-monitoring-constructs",
    "//:node_modules/constructs",
    "//:node_modules/lodash",
    "//:node_modules/rxjs",
    "//:node_modules/sshpk",
    "//:node_modules/tslib",
    "//:node_modules/validator",
    "//:node_modules/yargs",
]

tests = ["*.test.ts"]

ts_project(
    name = "lib",
    srcs = glob(
        ["*.ts"],
        exclude = tests,
    ) + ["package.json"],
    declaration = True,
    resolve_json_module = True,
    deps = deps,
)

ts_project(
    name = "test_lib",
    srcs = glob(tests) + ["package.json"],
    declaration = True,
    resolve_json_module = True,
    deps = [
        "lib",
        "//:node_modules/@types/jest",
    ],
)

jest_test(
    name = "test",
    config = "jest.config.mjs",
    data = [
        "package.json",
        "test_lib",
    ],
    node_modules = "//:node_modules",
    node_options = [
        "--experimental-vm-modules",
    ],
)

entry_base = "ssmProxyScript"

proxy_script_file_name = entry_base + ".cjs"

sourcemap = None

minify = True

external_libs = [
    "vscode",
    "aws-cdk",
]

cjs_bundle(
    name = "ssm_proxy_script",
    entry_point = entry_base + ".js",
    minify = minify,
    output = proxy_script_file_name,
    sourcemap = sourcemap,
    deps = [
        "lib",
    ],
)

session_manager_bin_name = "session_manager_bin"

session_manager(
    name = session_manager_bin_name,
)

cdk_app_file_name = "app.cjs"

cjs_bundle(
    name = "cdk_app",
    entry_point = "app.js",
    external_libs = external_libs,
    minify = minify,
    output = cdk_app_file_name,
    sourcemap = sourcemap,
    deps = [
        "lib",
    ],
)

cjs_bundle(
    name = "extension",
    define = {
        "process.env.PROXY_SCRIPT_FILENAME": '"{proxy_script_file_name}"'.format(proxy_script_file_name = proxy_script_file_name),
        "process.env.SESSION_MANAGER_BIN": '"{session_manager_bin_name}"'.format(session_manager_bin_name = session_manager_bin_name),
        "process.env.CDK_APP_FILENAME": '"{cdk_app_file_name}"'.format(cdk_app_file_name = cdk_app_file_name),
    },
    entry_point = "extension.js",
    external_libs = external_libs,
    minify = minify,
    output = "extension.cjs",
    sourcemap = sourcemap,
    deps = [
        "cdk_app",
        "lib",
        "ssm_proxy_script",
    ],
)

npm_package(
    name = "dist",
    srcs = [
        "cdk_app",
        "package.json",
        "extension",
        "ssm_proxy_script",
        "README.md",
        "LICENSE.txt",
        ".vscodeignore",
        session_manager_bin_name,
    ] + glob(["media/*.*"]),
    exclude_srcs_patterns = [],
)

base_args = [
    "package",
    "--no-git-tag-version",
    "--no-update-package-json",
    "--no-dependencies",
    "-o",
    "../vsc_package.vscx",
]

bin.vsce(
    name = "vsc_package",
    srcs = [
        "dist",
    ],
    outs = [
        "vsc_package.vscx",
    ],
    args = select(to_package_args_choice(base_args)),
    chdir = "$(rootpath dist)",
)

bin.vsce_binary(
    name = "publish",
    data = [
        "vsc_package"
    ],
    args = select(to_package_args_choice([
        "-i",
        "$(rootpath vsc_package)"
    ]))
)