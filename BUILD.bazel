load("@io_bazel_rules_docker//docker/util:run.bzl", "container_run_and_extract")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("index.bzl", "cjs_bundle")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")

workdir = "/session-manager-plugin"

container_image(
    name = "session_manager_base",
    base = "@session_manager_image//image:dockerfile_image.tar",
    directory = workdir,
    files = [
        "@session_manager_repo//:all_srcs",
    ],
    mode = "7777",
)

image_dist_path = workdir + "/bin"

container_run_and_extract(
    name = "session_manager_release",
    commands = [
        "cd " + workdir,
        "make release",
    ],
    extract_file = image_dist_path,
    image = "session_manager_base.tar",
)

copy_to_directory(
    name = "session_manager_bin",
    srcs = [
        "session_manager_release"
    ],
    include_srcs_patterns = [
        "**/*_plugin/session-manager-plugin".format(image_dist_path = image_dist_path)
    ],
    root_paths = [
        "session_manager_release" + image_dist_path
    ]
)

npm_link_all_packages(
    name = "node_modules",
)

ts_project(
    name = "lib",
    srcs = glob(["*.ts"]) + ["package.json"],
    declaration = True,
    resolve_json_module = True,
    deps = [
        "//:node_modules/@aws-sdk/client-ec2",
        "//:node_modules/@aws-sdk/client-ec2-instance-connect",
        "//:node_modules/@aws-sdk/credential-providers",
        "//:node_modules/@aws-sdk/client-ssm",
        "//:node_modules/@types/node",
        "//:node_modules/@types/sshpk",
        "//:node_modules/@types/yargs",
        "//:node_modules/aws-cdk-lib",
        "//:node_modules/cdk-monitoring-constructs",
        "//:node_modules/constructs",
        "//:node_modules/sshpk",
        "//:node_modules/tslib",
        "//:node_modules/yargs",
        "//:node_modules/@types/vscode"
    ],
)

entry_base = "ssmProxyScript"
proxy_script_file_name = entry_base + ".cjs"

sourcemap = None

cjs_bundle(
    name = "ssm_proxy_script",
    entry_point = entry_base + ".js",
    output = proxy_script_file_name,
    sourcemap = sourcemap,
    deps = [
        "lib",
    ],
)

cjs_bundle(
    name = "extension",
    entry_point = "extension.js",
    output = "extension.cjs",
    external_libs = ["vscode"],
    sourcemap = sourcemap,
    define = {
        "process.env.PROXY_SCRIPT_FILENAME": '"{proxy_script_file_name}"'.format(proxy_script_file_name = proxy_script_file_name),
        "process.env.SESSION_MANAGER_BIN": '"session_manager_bin"'
    },
    deps = [
        "lib",
        "ssm_proxy_script"
    ]
)

npm_package(
    name = "dist",
    srcs = [
        "package.json",
        "extension",
        "ssm_proxy_script",
        "session_manager_bin"
    ] + glob(["media/*.*"])
)